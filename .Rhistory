set.seed(1)
# variables implicadas en la regresión con variables categóricas ordinales siendo factor
ds_logit_1 <- select(ds, -c('Tarifa'))
var.logit <- colnames(ds_logit_1)
# modelo de regresión logística
logit_1 <- glm(formula = Sat ~ Sex + Edad+Tipo+Asiento_Co+Comida+Wifi+Compra+Servicio+Maletas+Retr_SA+Retr_LL, data=ds_logit_1, family=binomial)
# variables implicadas en la regresión con variables categóricas ordinales siendo int
ds_logit_2 <- ds_logit_1
ds_logit_2$Asiento_Co <- as.integer(ds_logit$Asiento_Co)
ds_logit_2$Comida <- as.integer(ds_logit$Comida)
ds_logit_2$Wifi <- as.integer(ds_logit$Wifi)
ds_logit_2$Compra <- as.integer(ds_logit$Compra)
ds_logit_2$Servicio <- as.integer(ds_logit$Servicio)
ds_logit_2$Maletas <- as.integer(ds_logit$Maletas)
# modelo de regresión logística
logit_2 <- glm(formula = Sat ~ Sex + Edad+Tipo+Asiento_Co+Comida+Wifi+Compra+Servicio+Maletas+Retr_SA+Retr_LL, data=ds_logit_2, family=binomial)
# vemos el modelo con factor
summary(logit_1)
# vemos el modelo con int
summary(logit_2)
# cálculo de las Odds-Ratio (ajustadas) para cada variable de los modelos
exp(coefficients(logit_1))
exp(coefficients(logit_2))
# hacemos predicciones con el modelo con factor
ds_testing_1 <- ds_logit_1
pred_test <- predict(object = logit_1, newdata = ds_testing_1, type = "response")
ds_testing_1$prediction <- ifelse(pred_test < 0.8 ,0, 1)
true_1 <- ds_testing_1$Sat
true_1<-as.factor(true_1)
# matriz de confusión
confusionMatrix(prediction, true_1, positive="1")
library(caret)
# hacemos predicciones con el modelo con factor
ds_testing_1 <- ds_logit_1
pred_test <- predict(object = logit_1, newdata = ds_testing_1, type = "response")
ds_testing_1$prediction <- ifelse(pred_test < 0.8 ,0, 1)
true_1 <- ds_testing_1$Sat
true_1<-as.factor(true_1)
# matriz de confusión
confusionMatrix(prediction, true_1, positive="1")
library(caret)
# hacemos predicciones con el modelo con factor
ds_testing_1 <- ds_logit_1
pred_test <- predict(object = logit_1, newdata = ds_testing_1, type = "response")
ds_testing_1$prediction <- ifelse(pred_test < 0.8 ,0, 1)
true_1 <- ds_testing_1$Sat
true_1<-as.factor(true_1)
# matriz de confusión
confusionMatrix(data=ds_testing_1$prediction, expected=true_1, positive="1")
library(caret)
# hacemos predicciones con el modelo con factor
ds_testing_1 <- ds_logit_1
pred_test <- predict(object = logit_1, newdata = ds_testing_1, type = "response")
ds_testing_1$prediction <- ifelse(pred_test < 0.8 ,0, 1)
# matriz de confusión
confusionMatrix(data=ds_testing_1$prediction, expected=ds_testing_1$Sat, positive="1")
library(caret)
# hacemos predicciones con el modelo con factor
ds_testing_1 <- ds_logit_1
pred_test <- predict(object = logit_1, newdata = ds_testing_1, type = "response")
ds_testing_1$prediction <- ifelse(pred_test < 0.8 ,0, 1)
# matriz de confusión
confusionMatrix(data=ds_testing_1$prediction, reference=ds_testing_1$Sat, positive="1")
library(caret)
# hacemos predicciones con el modelo con factor
ds_testing_1 <- ds_logit_1
pred_test <- predict(object = logit_1, newdata = ds_testing_1, type = "response")
ds_testing_1$prediction <- ifelse(pred_test < 0.8 ,0, 1)
ds_testing_1$prediction <- as.factor(ds_testing_1$prediction)
# matriz de confusión
confusionMatrix(data=ds_testing_1$prediction, reference=ds_testing_1$Sat, positive="1")
# hacemos predicciones con el modelo con int
ds_testing_2 <- ds_logit_2
pred_test <- predict(object = logit_2, newdata = ds_testing_2, type = "response")
ds_testing_2$prediction <- ifelse(pred_test < 0.8 ,0, 1)
true_2 <- ds_testing_2$Sat
true_2<-as.factor(true_2)
# matriz de confusión
confusionMatrix(data=ds_testing_2$prediction, reference = ds_testing_2$Sat, positive="1")
library(caret)
# hacemos predicciones con el modelo con factor
ds_testing_1 <- ds_logit_1
pred_test <- predict(object = logit_1, newdata = ds_testing_1, type = "response")
ds_testing_1$prediction <- ifelse(pred_test < 0.8 ,0, 1)
ds_testing_1$prediction <- as.factor(ds_testing_1$prediction)
# matriz de confusión
confusionMatrix(data=ds_testing_1$prediction, reference=ds_testing_1$Sat, positive="1")
# hacemos predicciones con el modelo con int
ds_testing_2 <- ds_logit_2
pred_test <- predict(object = logit_2, newdata = ds_testing_2, type = "response")
ds_testing_2$prediction <- ifelse(pred_test < 0.8 ,0, 1)
ds_testing_2$prediction <- as.factor(ds_testing_2$prediction)
# matriz de confusión
confusionMatrix(data=ds_testing_2$prediction, reference=ds_testing_2$Sat, positive="1")
library(caret)
# hacemos predicciones con el modelo con factor
ds_testing_1 <- ds_logit_1
pred_test <- predict(object = logit_1, newdata = ds_testing_1, type = "response")
ds_testing_1$prediction <- ifelse(pred_test < 0.8 ,0, 1)
ds_testing_1$prediction <- as.factor(ds_testing_1$prediction)
# matriz de confusión
conf_mat_1 <- confusionMatrix(data=ds_testing_1$prediction, reference=ds_testing_1$Sat, positive="1")
print(conf_mat_1)
# hacemos predicciones con el modelo con int
ds_testing_2 <- ds_logit_2
pred_test <- predict(object = logit_2, newdata = ds_testing_2, type = "response")
ds_testing_2$prediction <- ifelse(pred_test < 0.8 ,0, 1)
ds_testing_2$prediction <- as.factor(ds_testing_2$prediction)
# matriz de confusión
conf_mat_2 <- confusionMatrix(data=ds_testing_2$prediction, reference=ds_testing_2$Sat, positive="1")
print(conf_mat_2)
library(dplyr)
set.seed(1)
ds_logit_2 <- select(ds, -c('Tarifa'))
ds_logit_2$Asiento_Co <- as.integer(ds_logit$Asiento_Co)
ds_logit_2$Comida <- as.integer(ds_logit$Comida)
ds_logit_2$Wifi <- as.integer(ds_logit$Wifi)
ds_logit_2$Compra <- as.integer(ds_logit$Compra)
ds_logit_2$Servicio <- as.integer(ds_logit$Servicio)
ds_logit_2$Maletas <- as.integer(ds_logit$Maletas)
# modelo de regresión logística
logit_2 <- glm(formula = Sat ~ Sex + Edad+Tipo+Asiento_Co+Comida+Wifi+Compra+Servicio+Maletas+Retr_SA+Retr_LL, data=ds_logit_2, family=binomial)
# vemos el modelo con int
summary(logit_2)
# cálculo de las Odds-Ratio (ajustadas) para cada variable de los modelos
# modelo con int en las ordinales
exp(coefficients(logit_2))
# cálculo de las Odds-Ratio (ajustadas) para cada variable de los modelos
# modelo con int en las ordinales
exp(coefficients(logit_2))
# modelo de regresión logística eliminando la variable Tipo para saber si es de confusión
logit_3 <- glm(formula = Sat ~ Sex + Edad+Asiento_Co+Comida+Wifi+Compra+Servicio+Maletas+Retr_SA+Retr_LL, data=ds_logit_2, family=binomial)
# vemos el modelo con int
summary(logit_3)
# cálculo de las Odds-Ratio (ajustadas) para cada variable de los modelos
# modelo con int en las ordinales
exp(coefficients(logit_2))
# cálculo de las Odds-Ratio (ajustadas) para cada variable de los modelos
exp(coefficients(logit_2))
# cálculo del intervalo de confianza de la odds-ratio de Tipo
exp(confint(logit_2, level = 95))
# cálculo de las Odds-Ratio (ajustadas) para cada variable de los modelos
exp(coef(logit_2))
# cálculo del intervalo de confianza de la odds-ratio de Tipo
exp(cbind(Odds_Ratio = coef(logit_2), confint(logit_2)))
# cálculo de las Odds-Ratio (ajustadas) para cada variable y el intervalo de confianza
exp(cbind(Odds_Ratio = coef(logit_2), confint(logit_2)))
or_confint_tipo <- exp(cbind(Odds_Ratio = coef(logit_2), confint(logit_2)))[3,]
or_confint_tipo
library(caret)
# hacemos predicciones con el modelo con int
ds_testing_2 <- ds_logit_2
pred_test <- predict(object = logit_2, newdata = ds_testing_2, type = "response")
ds_testing_2$prediction <- ifelse(pred_test < 0.5 ,0, 1)
ds_testing_2$prediction <- as.factor(ds_testing_2$prediction)
# matriz de confusión
conf_mat_2 <- confusionMatrix(data=ds_testing_2$prediction, reference=ds_testing_2$Sat, positive="1")
print(conf_mat_2)
library(caret)
# hacemos predicciones con el modelo con int
ds_testing_2 <- ds_logit_2
pred_test <- predict(object = logit_2, newdata = ds_testing_2, type = "response")
ds_testing_2$prediction <- ifelse(pred_test < 0.5 ,0, 1)
ds_testing_2$prediction <- as.factor(ds_testing_2$prediction)
# matriz de confusión
conf_mat_2 <- confusionMatrix(data=ds_testing_2$prediction, reference=ds_testing_2$Sat, positive="1")
conf_mat_2$table
# sensibilidad
sensibilidad <- conf_mat_2$Sensitivity
especificidad <- conf_mat_2$Specificity
library(caret)
# hacemos predicciones con el modelo con int
ds_testing_2 <- ds_logit_2
pred_test <- predict(object = logit_2, newdata = ds_testing_2, type = "response")
ds_testing_2$prediction <- ifelse(pred_test < 0.5 ,0, 1)
ds_testing_2$prediction <- as.factor(ds_testing_2$prediction)
# matriz de confusión
conf_mat_2 <- confusionMatrix(data=ds_testing_2$prediction, reference=ds_testing_2$Sat, positive="1")
conf_mat_2$table
# sensibilidad
sensibilidad <- conf_mat_2$Sensitivity
sensibilidad
# especificidad
especificidad <- conf_mat_2$Specificity
especificidad
library(caret)
# hacemos predicciones con el modelo con int
ds_testing_2 <- ds_logit_2
pred_test <- predict(object = logit_2, newdata = ds_testing_2, type = "response")
ds_testing_2$prediction <- ifelse(pred_test < 0.5 ,0, 1)
ds_testing_2$prediction <- as.factor(ds_testing_2$prediction)
# matriz de confusión
conf_mat_2 <- confusionMatrix(data=ds_testing_2$prediction, reference=ds_testing_2$Sat, positive="1")
conf_mat_2
predict(object = logit_2, newdata = ds_logit_2[11,], type = "response")
prob_11 <- predict(object = logit_2, newdata = ds_logit_2[11,], type = "response")
prob_11[2,]
prob_11 <- predict(object = logit_2, newdata = ds_logit_2[11,], type = "response")
prob_11[2]
prob_11 <- predict(object = logit_2, newdata = ds_logit_2[11,], type = "response")
prob_11
viajero_11 <- ds_logit_2[11,]
prob_11 <- predict(object = logit_2, newdata = viajero_11, type = "response")
# predicción
prob_11
# valor real
viajero_11$Sat
viajero_11 <- ds_logit_2[11,]
prob_11 <- predict(object = logit_2, newdata = select(viajero_11, -c('Sat', 'Tarifa')), type = "response")
viajero_11 <- ds_logit_2[11,]
prob_11 <- predict(object = logit_2, newdata = select(viajero_11, -c('Sat')), type = "response")
# predicción
prob_11
# valor real
viajero_11$Sat
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.pos = 'H')
options(knitr.table.format = "pdf")
library(kableExtra)
library(dplyr)
library(ggplot2)
# cargamos dataset teniendo en cuenta el acento de biológico
ds <- read.csv("dat_AVE2.csv", check.names = F)
# cambiamos el nombre de la primera columna para poder visualizar
colnames(ds)[1] <- "Sexo_Bio"
# tipos de variables según R
glimpse(ds)
id.factor <- c(1,3,4,13)
id.num <- c(2,5,6,7,8,9,10,11,12)
var.factor <- colnames(ds)[id.factor]
var.num <- colnames(ds)[id.num]
# comprobación de la existencia o no de valores perdidos
colSums(is.na(ds))
# cambio de nombres de columnas
colnames(ds)[c(1, 3, 8)] <- c('Sex', 'Tipo', 'Compra')
# eliminación de espacios
library(stringr)
ds$Sex <- str_remove_all(ds$Sex, " ")
ds$Tipo <- str_remove_all(ds$Tipo, " ")
# conversión a factores
ds$Tipo <- as.factor(ds$Tipo)
ds$Sex <- as.factor(ds$Sex)
ds$Tarifa <- as.factor(ds$Tarifa)
ds$Sat <- str_replace_all(ds$Sat, 'Insatisfecho', 'I')
ds$Sat <- str_replace_all(ds$Sat, 'Satisfecho', 'S')
ds$Sat <- as.factor(ds$Sat)
# guardado del dataset
write.csv(ds, "dat_AVE2_clean.csv", row.names = FALSE)
# estructura del dataset
glimpse(ds)
# relación entre sexo y sat
# tabla de frecuencia
tab_sex_sat <- table(ds$Sex, ds$Sat)
plot(tab_sex_sat, main='Relación entre Sexo y Satisfacción')
# tabla de frecuencia relativa
tab_sex_sat_rel <- tab_sex_sat / margin.table(tab_sex_sat)
tab_sex_sat_rel
# relación entre Tipo y sat
# tabla de frecuencia
tab_tipo_sat <- table(ds$Tipo, ds$Sat)
plot(tab_tipo_sat, main='Relación entre Tipo y Satisfacción')
# tabla de frecuencia relativa
tab_tipo_sat_rel <- tab_tipo_sat / margin.table(tab_tipo_sat)
tab_tipo_sat_rel
# relación entre Tarifa y sat
# tabla de frecuencia
tab_tarifa_sat <- table(ds$Tarifa, ds$Sat)
plot(tab_tarifa_sat, main='Relación entre Tarifa y Satisfacción')
# tabla de frecuencia relativa
tab_tarifa_sat_rel <- tab_tarifa_sat / margin.table(tab_tarifa_sat)
tab_tarifa_sat_rel
# diagrama de sectores
pie(table(ds$Sat), labels = c('Insatisfecho','Satisfecho'), main = 'Distribución de las categorías de Sat globales', col=c('red', 'green'))
# diagrama de barras
barplot(table(ds$Sat), main = 'Distribución de las categorías de Sat globales', xlab='Categorías de Sat', ylab='Cantidad de Clientes', col = c('red', 'green'))
boxplot(ds$Asiento_Co ~ ds$Sat, main = 'Relación entre satisfacción global y del asiento', col = c('red', 'green'), xlab='Satisfacción global', ylab='Satisfacción del asiento')
boxplot(ds$Compra ~ ds$Sat, main = 'Relación entre satisfacción global y de la compra', col = c('red', 'green'), xlab='Satisfacción global', ylab='Satisfacción de la compra')
boxplot(ds$Servicio ~ ds$Sat, main = 'Relación entre satisfacción global y del servicio', col = c('red', 'green'), xlab='Satisfacción global', ylab='Satisfacción del servicio')
boxplot(ds$Maletas ~ ds$Sat, main = 'Relación entre satisfacción global y de las maletas', col = c('red', 'green'), xlab='Satisfacción global', ylab='Satisfacción de las maletas')
boxplot(ds$Wifi ~ ds$Sat, main = 'Relación entre satisfacción global y de la Wifi', col = c('red', 'green'), xlab='Satisfacción global', ylab='Satisfacción de la Wifi')
boxplot(ds$Comida ~ ds$Sat, main = 'Relación entre satisfacción global y de la comida', col = c('red', 'green'), xlab='Satisfacción global', ylab='Satisfacción de la comida')
# histograma
hist(ds$Retr_LL, main='Histograma del Tiempo de retraso en Llegadas del AVE', col='red', xlab='Tiempo de Retraso en minutos', ylab='Frecuencia')
# Q-Q plot
qqnorm(ds$Retr_LL, main='Q-Q Plot del Tiempo de retraso en Llegadas del AVE', col='red')
qqline(ds$Retr_LL, col='blue')
# tiempos de retraso positivos y transformados
# ds_log_retr_ll <- ds[ds$Retr_LL>0,]
# log_retr_LL <- log(ds_log_retr_ll$Retr_LL)
# histograma
# hist(log_Retr_LL, main='Histograma de Log(Retr_LL)', col='red', xlab='Log del Tiempo de Retraso', ylab='Frecuencia')
# Q-Q plot
# qqnorm(log_Retr_LL, main='Q-Q Plot de Log(Retr_LL)', col='red')
# qqline(log_Retr_LL, col='blue')
IC <- function(x, CL){
n <- length(x)
mu <- mean(x)
sd <- sd(x)
alfa <- 1 - (CL/100)
t <- qt( alfa/2, df=n-1, lower.tail=FALSE )
L <- mu - t*sd/sqrt(n)
U <- mu + t*sd/sqrt(n)
return (c(L, U))
}
# intervalo del 95%
IC(ds$Retr_LL, 95)
# intervalo de confianza para los satisfechos
id_s <- str_detect(ds$Sat, 'S')
IC(ds$Retr_LL[id_s], 95)
# intervalo de confianza para los insatisfechos
id_i <- str_detect(ds$Sat, 'I')
IC(ds$Retr_LL[id_i], 95)
# valores las proporciones
prop_Tipo_S <- prop.table(table(ds$Sat, ds$Tipo), margin = 1)[2,]
# diagrama de sectores circulares
pie(prop_Tipo_S, main = 'Proporción de viajeros Satisfechos según tipo de Viaje', col = c('Blue', 'Green'))
# distribución de Sat según Tipo
Tipo_S <- table(ds$Sat, ds$Tipo)[2,]
# proporciones de Sat según Tipo
prop_Tipo_S <- Tipo_S/colSums(table(ds$Sat, ds$Tipo))
# parámetros para la función propia
# Parámetros para la función propia
p1 <- prop_Tipo_S[1]
p2 <- prop_Tipo_S[2]
n1 <- Tipo_S[1]
n2 <- Tipo_S[2]
# función propia
proptest2 <-function ( p1,n1,p2,n2, CL){
alfa <- 1 - CL/100
p <- (n1*p1 + n2*p2) / (n1+n2)
zobs <- (p1-p2)/sqrt(p*(1-p)*(1/n1+1/n2))
# región crítica z para arriba
zcrit <- qnorm(alfa, lower.tail = FALSE)
pvalue <- pnorm(zobs, lower.tail = FALSE)
res <- c(zobs, zcrit, pvalue)
names(res) <- c('zobs', 'zcrit', 'pvalor')
return (res)
}
# resultado del test
res_proptest_S_Tipo <- proptest2(p1,n1,p2,n2,97)
# mostramos los resultados en una tabla que es un dataframe
res_proptest_S_Tipo <- data.frame(res_proptest_S_Tipo)
print(res_proptest_S_Tipo)
chisq.test(table(ds$Sat, ds$Tipo), correct=TRUE)
ds$Asiento_Co <- as.factor(ds$Asiento_Co)
ds$Comida <- as.factor(ds$Comida)
ds$Wifi <- as.factor(ds$Wifi)
ds$Compra <- as.factor(ds$Compra)
ds$Servicio <- as.factor(ds$Servicio)
ds$Maletas <- as.factor(ds$Maletas)
# correlación entre Retr_SA y Retr_LL
cor(ds$Retr_LL, ds$Retr_SA)
library(car)
# estimamos el modelo
model_1<- lm(Retr_LL~Retr_SA+Tipo + Tarifa + Comida + Sat, data=ds)
# medimos la colinealidad
colin <- vif(model_1)
colin
summary(model_1)
residuales <- rstandard(model_1)
v_ajustados <- fitted(model_1)
par(mfrow=c(1,2))
plot(v_ajustados, residuales, main='Gráfico de Residuales vs. Valores Ajustados', col='red')
qqnorm(residuales, main='Q-Q Plot de los Residuales del modelo de regresión lineal múltiple', col='red')
qqline(residuales, col='blue')
summary(residuales)
# recodificación de Sat
ds$Sat <- as.character(ds$Sat)
ds$Sat <- str_replace_all(ds$Sat, 'S', '1')
ds$Sat <- str_replace_all(ds$Sat, 'I', '0')
ds$Sat <- as.factor(ds$Sat)
library(dplyr)
set.seed(1)
ds_logit_2 <- select(ds, -c('Tarifa'))
ds_logit_2$Asiento_Co <- as.integer(ds_logit$Asiento_Co)
ds_logit_2$Comida <- as.integer(ds_logit$Comida)
ds_logit_2$Wifi <- as.integer(ds_logit$Wifi)
ds_logit_2$Compra <- as.integer(ds_logit$Compra)
ds_logit_2$Servicio <- as.integer(ds_logit$Servicio)
ds_logit_2$Maletas <- as.integer(ds_logit$Maletas)
# modelo de regresión logística
logit_2 <- glm(formula = Sat ~ Sex + Edad+Tipo+Asiento_Co+Comida+Wifi+Compra+Servicio+Maletas+Retr_SA+Retr_LL, data=ds_logit_2, family=binomial)
# vemos el modelo con int
summary(logit_2)
# cálculo de la Odds-Ratio (ajustadas) y el intervalo de confianza del 95% para Tipo
or_confint_tipo <- exp(cbind(Odds_Ratio = coef(logit_2), confint(logit_2, level = 95)))[4,]
ds$Servicio
levels(ds$Servicio)
View(ds)
# tenemos 5 tratamientos y 129,446 unidades experimentales
levels(ds$Servicio)
dim(ds)
# tenemos 5 tratamientos
levels(ds$Servicio)
# y  y 129446 unidades experimentales
dim(ds)[1]
# modelo de un factor con a=5 tratamientos
tapply(ds$Servicio,sum)
# modelo de un factor con a=5 tratamientos
c(n1,n2,n3,n4,n5) <- table(ds$Servicio)
# modelo de un factor con a=5 tratamientos
n1,n2,n3,n4,n5 <- table(ds$Servicio)
# modelo de un factor con a=5 tratamientos
n <- table(ds$Servicio)
# modelo de un factor con a=5 tratamientos
n <- table(ds$Servicio)
n
datos <- select(ds, Servicio, Retr_LL)
# miramos si el modelo es equilibrado
table(datos$Servicio)
datos <- select(ds, Servicio, Retr_LL)
# miramos si el modelo es equilibrado
table(datos$Servicio)
# con las medias
aggregate(Retr_LL ~ Servicio, data=datos, FUN = mean)
datos <- select(ds, Servicio, Retr_LL)
# miramos si el modelo es equilibrado
table(datos$Servicio)
# con las medias
aggregate(Retr_LL ~ Servicio, data=datos, FUN = mean)
# con las desviaciones
aggregate(Retr_LL ~ Servicio, data=datos, FUN = mean)
aggregate(Retr_LL ~ Servicio, data=datos, FUN = sd)
datos <- select(ds, Servicio, Retr_LL)
# miramos si el modelo es equilibrado
table(datos$Servicio)
# con las medias
means <- aggregate(Retr_LL ~ Servicio, data=datos, FUN = mean)
# con las desviaciones
sds <- aggregate(Retr_LL ~ Servicio, data=datos, FUN = sd)
merge(means, sds, by='Servicio')
datos <- select(ds, Servicio, Retr_LL)
# miramos si el modelo es equilibrado
table(datos$Servicio)
# con las medias
aggregate(Retr_LL ~ Servicio, data=datos, FUN = mean)
# con las desviaciones
aggregate(Retr_LL ~ Servicio, data=datos, FUN = sd)
ggplot(data = datos, aes(x = Retr_LL, y = Servicio, color = Retr_LL)) +
geom_boxplot() +
theme_bw()
ggplot(data = datos, aes(x = Servicio, y = Retr_LL, color = Retr_LL)) +
geom_boxplot() +
theme_bw()
ggplot(data = datos, aes(x = Servicio, y = Retr_LL, color = Retr_LL)) +
geom_boxplot()
ggplot(data = datos, aes(x = Servicio, y = Retr_LL)) +
geom_boxplot()
boxplot(Servicio, Retr_LL, outline=FALSE)
boxplot(datos, outline=FALSE)
boxplot(Retr_LL ~ Servicio, data = datos, outline=FALSE,
main = "Boxplot de Retr_LL por Servicio",
xlab = "Servicio",
ylab = "Retr_LL",
col = "lightblue")
# con los que considera outliers
boxplot(Retr_LL ~ Servicio, data = datos, outline=FALSE,
main = "Boxplot de Retr_LL por Servicio",
xlab = "Servicio",
ylab = "Retr_LL",
col = "lightblue")
# sin los que considera outliers
boxplot(Retr_LL ~ Servicio, data = datos, outline=FALSE,
main = "Boxplot de Retr_LL por Servicio",
xlab = "Servicio",
ylab = "Retr_LL",
col = "lightblue")
# con los que considera outliers
boxplot(Retr_LL ~ Servicio, data = datos, outline=TRUE,
main = "Boxplot de Retr_LL por Servicio",
xlab = "Servicio",
ylab = "Retr_LL",
col = "lightblue")
# sin los que considera outliers
boxplot(Retr_LL ~ Servicio, data = datos, outline=FALSE,
main = "Boxplot de Retr_LL por Servicio",
xlab = "Servicio",
ylab = "Retr_LL",
col = "lightblue")
par(mfrow = c(3,2))
qqnorm(datos[datos$Servicio == "1","Retr_LL"], main = "1")
qqline(datos[datos$Servicio == "1","Retr_LL"])
qqnorm(datos[datos$Servicio == "2","Retr_LL"], main = "2")
qqline(datos[datos$Servicio == "2","Retr_LL"])
qqnorm(datos[datos$Servicio == "3","Retr_LL"], main = "3")
qqline(datos[datos$Servicio == "3","Retr_LL"])
qqnorm(datos[datos$Servicio == "4","Retr_LL"], main = "4")
qqline(datos[datos$Servicio == "4","Retr_LL"])
qqnorm(datos[datos$Servicio == "5","Retr_LL"], main = "5")
qqline(datos[datos$Servicio == "5","Retr_LL"])
par(mfrow = c(5,1))
qqnorm(datos[datos$Servicio == "1","Retr_LL"], main = "1")
qqnorm(datos[datos$Servicio == "1","Retr_LL"], main = "1")
qqline(datos[datos$Servicio == "1","Retr_LL"])
qqnorm(datos[datos$Servicio == "2","Retr_LL"], main = "2")
qqline(datos[datos$Servicio == "2","Retr_LL"])
qqnorm(datos[datos$Servicio == "3","Retr_LL"], main = "3")
qqline(datos[datos$Servicio == "3","Retr_LL"])
qqnorm(datos[datos$Servicio == "4","Retr_LL"], main = "4")
qqline(datos[datos$Servicio == "4","Retr_LL"])
qqnorm(datos[datos$Servicio == "5","Retr_LL"], main = "5")
qqline(datos[datos$Servicio == "5","Retr_LL"])
by(data = datos,INDICES = datos$Servicio,FUN = function(x){ shapiro.test(x$Retr_LL)})
by(data = datos,INDICES = datos$Servicio,FUN = function(x){ shapiro.test(x$Retr_LL[0:5000])})
fligner.test(Retr_LL~ Servicio,datos)
fligner.test(Retr_LL~ Servicio,datos)
# rechazo de hipótesis nula. no hay varianza cponstante en los 5 grupos.
anova(datos)
fligner.test(Retr_LL~ Servicio,datos)
# rechazo de hipótesis nula. no hay varianza cponstante en los 5 grupos.
aova(datos)
fligner.test(Retr_LL~ Servicio,datos)
# rechazo de hipótesis nula. no hay varianza cponstante en los 5 grupos.
